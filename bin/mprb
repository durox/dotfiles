#!/bin/bash
#####################################################
## mprb                                            ##
## mprb v0.2.4                                     ##
## Print multiple files in duplex - batch mode     ##
## to a reserved printer                           ##
## Calling sequence:                               ##
## mprb [-ps <print strategy number> ] [-i | -I |  ##
##      -pass2] <print-files>                      ##
##                                                 ##
## -ps - print strategy                            ##
##       1 - Print odd pages reverse order first   ##
##       2 - Print even pages reverse order first  ##
##                                                 ##
## -i - list files to be printed and page counts   ##
##      then exit                                  ##
##                                                 ##
## -I - Same as -i, and ask user if they want to   ##
##      print the jobs and do it                   ##
##                                                 ##
## -pass2 - Skip pass 1 and just print the         ##
##          reverse pages                          ##
##          May be useful for resuming printing    ##
##          after a paper jam or misfeed.          ##
##          Just put the remaining good odd page   ##
##          jobs back in the printer in tray       ##
##          and start mprb with the completed      ##
##          and dammaged jobs removed from the     ##
##          argument list                          ##
##                                                 ##
## Copyright (c) 12 Mar 2013  Joseph J. Pollock    ##
##   JPmicrosystems - josephj at main.nc.us        ##
##                                                 ##
## This program is free software; you can          ##
## redistribute it and/or modify it under the      ##
## terms of the GNU General Public License as      ##
## published by the Free Software Foundation;      ##
## either version 2 of the License, or             ##
## (at your option) any later version.             ##
##                                                 ##
## This program is distributed in the hope         ##
## that it will be useful, but WITHOUT ANY         ##
## WARRANTY; without even the implied warranty     ##
## of MERCHANTABILITY or FITNESS FOR A             ##
## PARTICULAR PURPOSE. See the GNU General         ##
## Public License for more details.                ##
##                                                 ##
## You should have received a copy of the          ##
## GNU General Public License along with this      ##
## program; if not, write to                       ##
##    the Free Software Foundation, Inc.           ##
##    59 Temple Place - Suite 330                  ##
##    Boston, MA  02111-1307, USA                  ##
#####################################################

################################################################
## Uses enscript to convert non-text files to PostScript
## for page counting purposes
##  depends on yad, cups-bsd
################################################################

#### debug
#fake lp for testing w/o a printer 
##source ${HOME}/pgm/bash_functions/lp

function quit {
  ## clean up loose ends and exit
  ##
  rm -f ${TMPFILE} ${TMPFILE_PPC} 
  if (( DUPLEX_GUI ))  ## if called from a script, return status in a file
  then
    echo "${rc}" > "${mprb_status}"
  fi
  
  exit $rc
}

function user_abort {
  ## clean up loose ends from user abort
  ##
  echo
  echo "  Aborted by User"
  echo
  rc=1
  quit
}

function non_numeric {
  ## Test string for non_numeric
  ## For use with (( )) (opposite of [ ])
  local VAR
  ##echo "Testing [${1}]"  ## debug
  [ -z "${1}" ] && return 1
  VAR="$(echo "${1}" | sed -re 's/[0-9][0-9]*//')"
  [ -z "${VAR}" ]
  return $?
}

function print_file_type() {
  ## What type of printable? file is $1
  ## Return 0 on success
  ##        1 on failure
  ## Return PRINT_FILE_TYPE
  ##          0 if file does not exist
  ##               or can't be read
  ##          1 if file is PostScript
  ##          2 if file is text
  ##          3 if file is PDF
  ##          255 if other

  local STR

  if [ ! -r "${1}" ]  # if the file can't be read
  then
    PRINT_FILE_TYPE=0
    return 1
  fi

  STR=$(file -Lb "${1}")
  ## echo "STR=["${STR}"]"
  case "${STR}" in
    *"PostScript"*"text"*)
      PRINT_FILE_TYPE=1
      return 0
      ;;
    
    *"text"*)
      PRINT_FILE_TYPE=2
      return 0
      ;;
    
    *"PDF"*)
      PRINT_FILE_TYPE=3
      return 0
      ;;
    
    *)
      PRINT_FILE_TYPE=255
      return 1
      ;;
  esac
}

function page_count () {
  unset page_ct
  if [ ! -r "${1}" ]  # if the file can't be read
  then
    return 1
  fi

  print_file_type "${1}"
  case "${PRINT_FILE_TYPE}" in
    1)  ## PostScript
      ps_page_ct "${1}"
      return $?
      ;;
    
    3)  ## PDF
      pdf_page_ct "${1}"
      return $?
      ;;
    
    *)  ## Anything else fails 
      return 1
      ;;
  esac
  
}

function pdf_page_ct () {
  local MAGIC PAGE_CT0 RC

  if [ ! -r "${1}" ]
  then
    return 1 
  fi

  MAGIC="$(head -1 "${1}" | cut -d '-' -f 1)"
  if [ "${MAGIC}" != "%PDF" ]
  then
    return 1 
  fi

  PAGE_CT0=$(pdfinfo "${1}" 2>/dev/null | grep 'Pages:' | awk '{print $2}')
  RC=$?
  (( RC )) && return ${RC}
  if (( PAGE_CT0 ))
  then
    page_ct=${PAGE_CT0}
    return 0
  fi

  return 1
}

function ps_page_ct () {
  ## extract page count from postscript file
  ## Return   0 on success
  ##          1 on failure
  ##        Number of pages in page_ct (unset if not found)
  ## This is totally seat of the pants - no guarantees
  ## First, try to find it at the tail of the file.
  ## If that fails, try at the head
  ## If that fails, count the nummber of showpage commands and cross your fingers
  ## This method is not guaranteed to work because one showpage could be in a function
  ## called repeatedly, etc.

  local args line page_ct0

  ##echo starting page count
  unset page_ct page_ct0  ## Clear the return result in case an error occurs

  line=$(tail -30 "${1}" | grep "%%Pages:")  ## Find the line containing %%Pages: nn
  ##echo Line = "[${line}]" > /dev/stderr
  args=(${line})  ## Put it into an array to extract the second field - number of pages
  if [ "${args[0]}" == "%%Pages:" ]
  then
    page_ct0=$(( ${args[1]} ))
    if [ "${page_ct0}" -gt 0 ]
    then
      page_ct="${page_ct0}"
      return 0
    fi
  fi

  ## If at first you don't succeed, try, try again 
  line=$(head -30 "${1}" | grep "%%Pages:")  ## Find the line containing %%Pages: nn
  ##echo Line = "[${line}]" > /dev/stderr
  args=(${line})  ## Put it into an array to extract the second field - number of pages
  if [ "${args[0]}" == "%%Pages:" ]
  then
    page_ct0=$(( ${args[1]} ))
    if [ "${page_ct0}" -gt 0 ]
    then
      page_ct="${page_ct0}"
      return 0
    fi
  fi

  ## The third time is the charm
  page_ct0="$(grep -c 'showpage' "${1}" 2>/dev/null)"
##  page_ct0="$(grep -c 'HiResBoundingBox' "${1}" 2>/dev/null)"
  if [ $? -eq 0 ] && [ "${page_ct0}" -gt 0 ]
  then
    page_ct="${page_ct0}"
    return 0
  fi

  return 1
}

function lp_queue_id() {
  # lp_queue_id - extract print queue number
  #       from message issued by lp
  #       returns 0 if successful, 1 if failed
  #       queue number is returned in lpq_id as a string queue-jobnumber
  local usage
  usage="Usage is ${FUNCNAME} {lp-print-message}"

  ##echo "lpq received [$*]" > /dev/stderr
  if [ -z "${4}" ]  # The 4th word returned by lp
  then            # should be printer-q_id
    echo ${usage} > /dev/stderr   # if it's null, then foobar
    unset lpq_id  # echo a usage message
    return 1      # and return an error
  fi

##  echo "lpq_id [${4}]" > /dev/stderr
  lpq_id=${4} # extract q_id

  return 0
}

function job_in_print_queue {
  ## Return 0 if print queue contains job number $1
  ## query the print queue using lpstat
  ## pipe the outout into grep to find just the line containing the job number333333
  ## $1.  Use command substitution (``) and quoting to get that line into a string
  ## which is then tested for non-empty (-n).  If the print job exists, we'll get
  ## the line and the string will be non-empty.  Otherwise, the string will be empty
  ## Can deal with multiple print queues if $1 contains Queuename-jobnumber

  ##echo "[$(lpstat | grep "$1")]" > /dev/stderr
  if [ -n "$(lpstat | grep "${1}")" ]
  then
    return 0
  fi

  return 1
}

function wait_until_printjob_done {
  ## Wait print job to finish
  ## Uses the job_in_print_queue function (defined above) to see if job number $1
  ## is still in the print queue. If it is, wait and look again until
  ## it's not found (presumably, finished spooling to printer)

  while job_in_print_queue ${1}
  do
    ##echo found it > /dev/stderr
    sleep 2  ## adjust for the speed of your printing process
  done

  ##echo it\'s gone > /dev/stderr
  return 0

}

##################################################################
##  Main Program                                                ##
##################################################################
##source /home/bigbird/bin/bash_trace  ## debug

trap 'user_abort' 2  ## Call user_abort() if user presses ctrl-c
name=$(basename ${0})  ## path stripped name of this script
usage="Usage: ${name} [-ps <print-strategy-number> ] [-i | -I | -pass2] <print-files>"

## yad parameters
yopt="--title $name --on-top"  # yad common options
dsptime=60  ## yad message timeout interval in seconds
YYES="OK"
YNO="Cancel"

## enscript parameters
## In moderate point sizes (12+), the header font may need to be proportional
## To show the whole header
## A non-proportional font for the body works best for structured text
body_font="Luxi-Mono"  ## font for enscript for non-postscript files
header_font="Times-Roman"  ## font for enscript for non-postscript files
font_size=14  ## point size for enscript
margins="50:50:50:50" ## 100ths of inch top, bottom, left, right for enscript

total_pages=0  ## total (both sides) pages being printed
per_pass=0     ## total pages per pass (including blanks)
run=0  ## If true (0), then actually print jobs
askrun=1  ##  Ask user to do real run after dry run if true (0)
ynq="" ## yes/no question answer variable
tp="/tmp"  ## Directory to put temporary files in
mprb_status="${tp}/mprb_status" ## fixed name temp file to return exit status (when called by a script)
files_printed="${tp}/mprb_files_printed" ## fixed name temp file to return list of files printed
< /dev/null > "${files_printed}"    ## empty to start with

## Set default print strategy here to match the way your printer handles paper
##print_strategy=1   ## Printing strategy for HP Deskjets 720, 895C, Photosmart C4480 
print_strategy=2   ## Printing strategy for HP Laserjets P1006, 1020
if [ $# -gt 0 ]
then
  if [ "${1}" == "-ps" ]
  then
    shift
    if [ $# -gt 0 ]
    then
      if [ "${1}" == "1" ] || [ "${1}" == "2" ]
      then
        print_strategy="${1}"
        shift
      else
        echo "Invalid print strategy number"
        echo "${usage}"
        rc=1
        quit
      fi
    fi
  fi
fi

## put your lp options for printing each side in each print strategy here
case "${print_strategy}" in
  # Print odd pages first in reverse order
  1)
    pass1_par="-o page-set=odd -o outputorder=reverse"
    pass2_par="-o page-set=even -o outputorder=normal"
  ;;
  # Print even pages first in reverse order
  2)
    pass1_par="-o page-set=even -o outputorder=reverse"
    pass2_par="-o page-set=odd -o outputorder=normal"
  ;;
  #
  *)
  echo
  echo "  Undefined Print Strategy - [${print_strategy}]"
  echo "  ${usage}"
  echo
  rc=1
  quit
  ;;
esac

if [ $# -gt 0 ]
then
  if [ "${1}" == "-i" ] || [ "${1}" == "-I" ] ## -i - do a dry run with page counts
  then
    run=1 ## just display pages to be printed and quit

    if [ "${1}" == "-I" ]  ## Ask user to do real run after dry run
    then
      askrun=0
    fi

    shift
    if [ $# -gt 0 ] && [ "${1}" == "-pass2" ] ## -pass2 n/a for dry run
    then
      shift
    fi

  fi
fi

if [ $# -gt 0 ] && [ "${1}" == "-pass2" ] ## Print only Pass two
then
  pass1=1  ## Turn off Pass 1
  shift
  reinsert=0      ## Enable Pass 2
  args2=("$@")    ## file list for Pass 2
  jobs=0          ## File count for Pass 2
  ##echo "Args2 for pass 2 ["${args2[@]}"]" > /dev/stderr ##debug
else
  pass1=0  ## Turn on Pass 1
  case "${print_strategy}" in
    # 
    1)
      reinsert=1      ## Disable Pass 2 until a job prints more than one page
    ;;
    2)
      reinsert=1      ## Disable Pass 2 until a job prints at least one page
    ;;
    #
    *)
    echo
    echo "  Undefined Print Strategy - [${print_strategy}]"
    echo "  Programmer malfunction - please report bug"
    echo
    rc=1
    quit
    ;;
  esac

fi

## If no arguments, or just "*" then exit
STR="$*"
if [ "${STR}" == '*' -o -z "${STR}" ]
then
  echo "Nothing to print"
  rc=0
  quit
fi

## Create temp file for enscript output
TMPFILE=$(/bin/mktemp -q ${tp}/mprb.XXXXXX)  # create temp file
if [ $? -ne 0 ]    # if create tempfile failed
then
  echo "Can't create temp file"
  echo -e "Check permissions for ${tp}\n\nAborting..."
  rc=1
  quit
fi

## Create temp file for pdf_page_count () to use
TMPFILE_PPC=$(/bin/mktemp -q ${tp}/mprb.XXXXXX)  # create temp file
if [ $? -ne 0 ]    # if create tempfile failed
then
  echo "Can't create temp file"
  echo -e "Check permissions for ${tp}\n\nAborting..."
  rc=1
  quit
fi

## echo "Temp file is ["${TMPFILE}"]" > /dev/stderr
## Process argument list in reverse for Pass 1 so first job
## comes out on top at end of Pass 2

args=("$@")
jobs=0  ## Count of files printed
goodjobs=$#
cnt=0  ## file count for dry run
## The following code assumes that pass 1 pages
## are printed in reverse order in all printing strategies
for (( n=$#-1 ; n>=0 ; n-- ))
do
  if [ "${run}" -eq 0 ]  ## actual printing run
  then
    file="${args[n]}"  ## reverse order for proper printing
  else
    file="${args[cnt]}"  ## normal order so as not to confuse user
    let cnt++
  fi
  ##echo "file is ["${file}"]" > /dev/stderr
  if [ "${pass1}" -eq 1 ] ## Skip Pass 1
  then                  ## Without having to put the whole thing
    break               ## in another if statement
  fi

  fn="${file}"  ## save file name for messages
  if [ ! -e "${file}" ]
  then
    echo "Skipping ["${file}"] - not found"
    (( goodjobs--))
    continue
  fi

  if [ ! -s "${file}" ]
  then
    echo "Skipping ["${file}"] - empty"
    (( goodjobs--))
    continue
  fi

  if [ -d "${file}" ]
  then
    echo "Skipping ["${file}"] - directory"
    (( goodjobs--))
    continue
  fi
  

  print_file_type "${file}"
  if (( $? ))     ## Something we can't handle
  then            ## then bypass it
    echo "Skipping ["${file}"] - Can't process this file"
    (( goodjobs--))
    continue
  fi

  if [ "${PRINT_FILE_TYPE}" -eq 2 ]     ## If it's text
  then                  ## Convert it to postscript
    enscript -B -Z --silent --word-wrap --margins=$margins -f${body_font}@${font_size} -F${header_font}@${font_size} -o ${TMPFILE} "${file}"
    file=${TMPFILE}
  fi

  page_count "${file}"   ## Get Number of pages to print
  if (( $? ))
  then
    ##echo "#### Debug page_ct = [${page_ct}]"                                                                                                
    echo "page_count() failed"
    echo "Skipping ["${fn}"]"
    (( goodjobs-- ))
    continue
  fi

  ## Print pass 1
  let jobs++
  let total_pages+=$page_ct
  let per_pass+=$page_ct/2   ## half fronts, half backs

  if [ $(( ${page_ct}%2 )) -eq 1 ]  ## add one for the 
  then                       ## last odd page
    let per_pass++
  fi

  if [ "${run}" -eq 0 ]
  then  ## number reverse for real printing
    let n1=${n}+1  ## user doesn't want to see "job 0"
  else  ## number forward for dry run
    let n1=${jobs}
  fi

  echo "Printing ${n1} of ${goodjobs} - [${fn}] - ${page_ct} pages"
  if [ "${run}" -eq 1 ]  ## dry run
  then
    continue
  fi

  case "${print_strategy}" in
    # 
    1)
      (( ++FAKE_PRINT_JOB_NUMBER ))  ## used for testing with fake lp
      myjob=$(lp ${pass1_par} "${file}")    ## print pass 1 and capture lp message
      rc=$?
      if (( rc )) # if lp failed
      then
        echo "lp failed to print ["${fn}"]"
        echo "${name}: Aborting pass one"
        quit
      fi

      echo ${myjob}  ## Let user see job number
      
      if [ "${page_ct}" -gt 1 ]  ## Only need pass 2 if at least one job
      then                     ## printed more than one page
        reinsert=0
      fi
    ;;
    2)
      ##source "/home/bigbird/bin/bash_trace"  ##debug
      ## Prepend a blank page to the pass one output
      ## to print the last odd page on in pass 2
      if (( ${page_ct}%2 ))
      then
        (( ++FAKE_PRINT_JOB_NUMBER ))  ## used for testing with fake lp
        myjob=$(echo -n $'\f' | lp)
        rc=$?
        if (( rc )) # if lp failed
        then
          echo "lp failed to print [${fn}] with error [${rc}]"
          echo "${name}: Aborting pass one"
          quit
        fi
        echo "${myjob} FF" ## Let user see job number
      fi

      ## If page count == 1 then we already printed the even page above
      if (( ${page_ct} > 1 ))
      then
        (( ++FAKE_PRINT_JOB_NUMBER ))  ## used for testing with fake lp
        myjob=$(lp ${pass1_par} "${file}")    ## print pass 1 and capture lp message
        rc=$?
        if (( rc )) # if lp failed
        then
          echo "lp failed to print [${fn}] with error [${rc}]"
          echo "${name}: Aborting pass one"
          quit
        fi
        echo ${myjob}  ## Let user see job number
      fi

      reinsert=0
      ##source "/home/bigbird/bin/bash_trace_off"  ##debug
    ;;
    #
    *)
      echo
      echo "  Undefined Print Strategy - [${print_strategy}]"
      echo "  Programmer malfunction - please report bug"
      echo
      rc=1
      quit
    ;;
  esac

  ##echo "jobs [${jobs}] fn [${fn}]"  ##debug
  args2[jobs-1]="${fn}" ## Save only the job names that actually
                      ## printed to pass to Pass 2
  ##echo "args2[jobs-1] [${args2[jobs-1]}]" ##debug
done

if [ "${total_pages}" -gt 0 ]
then
  echo
  echo "Printing "${jobs}" jobs with "${total_pages}" pages"
  echo "    "${per_pass}" Sheets per pass"
  echo
fi

if [ "${run}" -eq 1 ] &&  [ "${total_pages}" -gt 0 ] ## if dry run, print summary and exit
then
  rm -f "${TMPFILE}" "${TMPFILE_PPC}"
  if [ "$askrun" -eq 0 ]  ## If -I - ask user to print
  then
    yad ${yopt} --question --button=gtk-yes:0 --button=gtk-no:1 --text="Go ahead and print these jobs? "
    if [ "$?" -eq 0 ]  ## User clicked Yes
    then
      $0 -ps "${print_strategy}" "${args[@]}"  ## Recursively run the script without the "-I"
      rc=$?
      quit
    fi
  fi

  exit 0
fi

## All pass 1 jobs sent to printer
## wait for the last one to finish
## Assumes fifo print queue

if [ "${pass1}" -eq 0 ] ## Finish Pass 1 post processing
then
  if [ "${reinsert}" -eq 0  ]    ## Don't bother with all this
  then                         ## unless more than one page to print
    lp_queue_id ${myjob}  ## Get id of last job sent to printer
    wait_until_printjob_done ${lpq_id}  ## Wait for it to be gone

    yad ${yopt} --question --on-top --text="Printing Pass One - Please Wait\n\n
    When finished, either\n\n
    Rotate and reinsert the pages\n
    Then, Click ${YYES} to Print the other sides\n\n
    or\n\n
    Click ${YNO} to Abort"
    if [ $? -ne 0 ]  ## User clicked No
    then
      echo "User Abort - Skipping Pass Two"
      rc=1
      quit
    fi

    ##echo "Args2 from pass 1 ["${args2[@]}"]" > /dev/stderr ##debug
    let k=jobs-1                   ## Reverse the list of printed files so
    for (( j=0 ; j<k ; j++ ))      ## Pass 2 gets them in the same order
    do
      ##echo " J K :" ${j} ${k} > /dev/stderr  ##debug
      ##echo "Before Sj Sk ["${args2[${j}]}"] ["${args2[${k}]}"]" > /dev/stderr  ##debug
      str="${args2[${j}]}"            ## Whether or not Pass 1 runs
      args2[${j}]="${args2[${k}]}"
      args2[${k}]="${str}"
      ##echo "After Sj Sk ["${args2[${j}]}"] ["${args2[${k}]}"]" > /dev/stderr  ##debug
      let k--
    done
    ##echo "Args2 for pass 2 ["${args2[@]}"]" > /dev/stderr  ##debug
  fi
fi

## Starting Pass Two

if [ "${reinsert}" -eq 0 ]  ## If there is anything to print on the reverse sides
then
  n1=0  ## job counter for Pass 2
  jobs=${#args2[*]}
  for file in "${args2[@]}"
  do
    ##echo "Pass2 printing ["$file"]" > /dev/stderr  ##debug
    ##continue  ## debug
    fn="${file}"  ## save file name for messages
    if [ ! -e "${file}" ]
    then
      echo "ERROR ["${file}"] - not found on pass 2"
      echo "${name}: Aborting Pass Two"
      rc=1
      quit
    fi

    if [ ! -s "${file}" ]
    then
      echo "ERROR ["${file}"] - empty on pass 2"
      echo "${name}: Aborting Pass Two"
      rc=1
      quit
    fi

    if [ -d "${file}" ]
    then
      echo "ERROR ["${file}"] - directory on pass 2"
      echo "${name}: Aborting Pass Two"
      rc=1
      quit
    fi

    print_file_type "${file}"
    if (( $? ))     ## Something we can't handle
    then            ## then bypass it
      echo "ERROR ["${file}"] - Can't process this file type on pass 2"
      echo "${name}: Aborting Pass Two"
      rc=1
      quit
    fi

    if [ "${PRINT_FILE_TYPE}" -eq 2 ]     ## If it's text
    then                  ## Convert it to postscript
      enscript -B -Z --silent --word-wrap --margins=$margins -f${body_font}@${font_size} -F${header_font}@${font_size} -o ${TMPFILE} "${file}"
      file=${TMPFILE}
    fi

    page_count "${file}"   ## Get Number of pages to print
    if (( $? ))
    then
      echo "ps_page_ct() failed for [${fn}] on pass 2"
      echo "${name}: Aborting Pass Two"
      rc=1
      quit
    fi

    ## Print pass 2
    let n1++
    echo "Printing ${n1} of ${jobs} - [${fn}] - ${page_ct} pages" #### mod

    case "${print_strategy}" in
      # 
      1)
        ## if page count == 1 then there aren't any real even pages to print
        ## the one odd page will be ejected below
        if (( ${page_ct} > 1 ))
        then
          (( ++FAKE_PRINT_JOB_NUMBER ))  ## used for testing with fake lp
          myjob=$(lp ${pass2_par} "${file}")    # print pass 2 and capture lp message
          rc=$?
          if (( rc )) # if lp failed
          then
            echo "lp failed to print [${fn}] with error [${rc}]"
            echo "${name}: Aborting Pass Two"
            quit
          fi
          echo ${myjob}  ## Let user see job number
        fi
        
        ## Get the last odd page, if any, out of the printer
        ## by sending a formfeed to printer
        if (( ${page_ct}%2 ))
        then
          (( ++FAKE_PRINT_JOB_NUMBER ))  ## used for testing with fake lp
          myjob=$(echo -n $'\f' | lp)
          rc=$?
          if (( rc )) # if lp failed
          then
            echo "lp failed to print [${fn}] with error [${rc}]"
            echo "${name}: Aborting Pass Two"
            quit
          fi
          echo "${myjob} FF"  ## Let user see job number
        fi
      ;;
      2)
        ## Printing the even pages first, there's always at least one odd page to print
        ## That was handled in pass one by first printing a blank even page for jobs with
        ## an odd page count
        (( ++FAKE_PRINT_JOB_NUMBER ))  ## used for testing with fake lp
        myjob=$(lp ${pass2_par} "${file}")    # print pass 2 and capture lp message
        rc=$?
        if (( rc )) # if lp failed
        then
          echo "lp failed to print [${fn}] with error [${rc}]"
          echo "${name}: Aborting Pass Two"
          rc=1
          quit
        fi

        echo ${myjob}  ## Let user see job number
      ;;
      #
      *)
        echo
        echo "  Undefined Print Strategy - [${print_strategy}]"
        echo "  Programmer malfunction - please report bug"
        echo
        rc=1
        quit
      ;;
    esac

    ## Collect summary info if Pass 1 didn't happen
    if [ "${pass1}" -eq 1 ]
    then
      let total_pages+=${page_ct}
      let per_pass+=${page_ct}/2   ## half fronts, half backs
      if [ $(( ${page_ct}%2 )) -eq 1 ]  ## add one for the
      then                       ## last odd page
        let per_pass++
      fi

    fi

    ## In this pass, print one job at a time
    ## So user has a fighting chance to recover
    ## From a paper jam if one occurs
    
    lp_queue_id ${myjob}  ## Get last job's id
    wait_until_printjob_done ${lpq_id}  ## wait until it's done

  done

fi

rm -f ${TMPFILE}

if [ "${total_pages}" -gt 0 ]
then
  echo
  echo "Printed ${jobs} jobs with ${total_pages} pages"
  echo "    ${per_pass} Sheets printed"
  echo
fi

if [ "${jobs}" -gt 0 ]
then
  yad ${yopt} --info --button=gtk-ok:0 --text="Printing last job - Please Wait\n\n
  When finished,\n\n
  Remove the printout from the printer" --timeout=${dsptime}
else
  rc=0
  quit
fi

## If this script was called by another one (kmprb)
## then return a list of the files actually printed
## in a fixed name temporary file
if (( DUPLEX_GUI ))
then
  ##echo "Files Printed [${args2[@]}]"
  for (( i=0 ; i<${#args2[@]} ; i++ ))
  do
    CHOICES="${CHOICES}\"${args2[i]}\" "
  done
  ##echo "CHOICES [${CHOICES}]"
  echo "${CHOICES}" > "${files_printed}" 
    
  ##cat "${files_printed}"
fi

rc=0
quit
